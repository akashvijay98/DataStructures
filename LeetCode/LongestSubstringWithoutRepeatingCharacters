class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer> map = new HashMap<>();

        int maxLength = 0;
        int start = 0;

        for(int windowEnd=0;windowEnd<s.length();windowEnd++){

            char rightChar = s.charAt(windowEnd);

            if(map.containsKey(rightChar)){
               
               // 1.suppose start is ahead of the last index of windowEnd, then max will be start 
               //--------->(Example "dvjfdg"). here when start is at index 1 (v), and when d repeats, well take start instead of d's index'
               // 2.else windowEnd will be ahead of start 
               start = Math.max(start, map.get(rightChar)+1);

            }

            maxLength = Math.max(maxLength, windowEnd-start+1);
            map.put(rightChar, windowEnd);
        }
        return maxLength;
    }
}
